#pragma once 

#include "Includes.h"
#include "Chunk.h"

typedef shared_ptr <Chunk> ChunkPtr ;

class ChunkMap{
public:
	void process(GLSLShader& shader, glm::vec2& playerPosition);
	void render(GLSLShader& shader, RENDER_TYPE renderType, GLuint globalMatricesUBO);
private:
	list<ChunkPtr> chunks;
	list<ChunkPtr> preparingChunks;

	int threadsAvailable = 3;

	void checkChunks(GLSLShader& shader);

	// Returns List of Chunks That Should Render assuming that passed position is Player Position
	list<glm::ivec2> getChunksForPosition(glm::vec2& position);

	// Takes Players Position And Generates Required Chunks
	void generateRequiredChunks(list<glm::ivec2>& requiredChunks);

	// Deletes Unneeded Chunks
	void deleteUnneededChunks(list<glm::ivec2>& requiredChunks);

	// Checks If Chunk Exist at Chunk Position
	bool doesChunkExistsAtPosition(glm::ivec2& chunkPosition);

	// Creates Chunk Object And Starts It's Thread
	void generateChunk(glm::ivec2& position);

	// Adds Surrounding Fields
	void addSurrounding(glm::ivec2& position, list<glm::ivec2>& required);
};